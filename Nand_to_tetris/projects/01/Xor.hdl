// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Xor.hdl

/**
 * Exclusive-or gate:
 * out = not (a == b)
 */

CHIP Xor {
    IN a, b;
    OUT out;

    PARTS:
    // Put your code here:
    /*Xor is simply an exclusive or. So compared to the last Or we implemented where we 1 and 1 = 1, that calculation must be a 0. so in this logic gate 1 and 1 = 0, 0 and 1 = 1
    The only way I know to do Xor in an uncomplicated way is to use Or, Nand, and, And.

    First we output the results of the Or
    Then we output the result of Not And, now this seems like it would be the same as Or, the difference being that Not And is completely exclusive. If we use two Nands or Two Or's we get incorrect results as we need the difference of exclusive and non exclusive outputs here to get the expected results.
    */

    Or(a=a, b=b, out=aout);
    Nand(a=a, b=b, out=bout);
    And(a=aout, b=bout, out=out);

}